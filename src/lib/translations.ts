import { Language } from '@/hooks/useLanguage';

export const translations = {
  es: {
    // Navbar
    title: 'JavaScript Event Loop Simulator',
    subtitle: 'Visualizaci√≥n interactiva del flujo s√≠ncrono y as√≠ncrono',
    auto: 'Auto',
    speed: 'Velocidad',
    speedSlow: 'Lenta',
    speedNormal: 'Normal',
    speedFast: 'R√°pida',
    reset: 'Reiniciar',
    theme: 'Tema',
    about: 'Acerca del Event Loop',
    selectSpeed: 'Seleccionar velocidad',
    resetSimulation: 'Reiniciar simulaci√≥n',
    
    // Event Cards
    syncCode: 'C√≥digo S√≠ncrono',
    syncDesc: 'Ejecuci√≥n inmediata en el Call Stack',
    setTimeoutDesc: 'Callback Queue con retraso',
    promiseDesc: 'Microtask Queue con prioridad',
    fetchDesc: 'Web APIs + Promises combinados',
    eventName: 'Event name',
    codeToExecute: 'Code to execute',
    delayMs: 'Delay (ms)',
    loadEvent: 'Cargar evento',
    
    // Event Loop Panel
    eventLoop: 'Event Loop',
    callStack: 'Call Stack',
    callStackTip: 'Pila de llamadas donde se ejecuta el c√≥digo s√≠ncrono.',
    webApis: 'Web APIs',
    webApisTip: 'APIs del navegador que gestionan operaciones as√≠ncronas (timers, fetch, etc.).',
    microtaskQueue: 'Microtask Queue',
    microtaskQueueTip: 'Cola de alta prioridad (promesas cumplidas, mutation observers).',
    callbackQueue: 'Callback Queue',
    callbackQueueTip: 'Cola de callbacks de menor prioridad (timers, eventos de UI).',
    
    // Execution Log
    executionLog: 'üìã Log de Ejecuci√≥n',
    noLogs: 'No hay registros a√∫n',
    
    // Controls
    viewSummary: 'üìä Ver resumen',
    restart: 'üîÅ Reiniciar',
    execute: '‚èµ Ejecutar',
    nextStep: '‚è≠ Siguiente paso',
    
    // Summary Dialog
    summaryTitle: 'Resumen de ejecuci√≥n',
    loadedEvents: 'Eventos cargados',
    noEvents: 'Sin eventos',
    executionOrder: 'Orden de ejecuci√≥n',
    noSteps: 'Sin pasos ejecutados',
    outputs: 'Outputs (console.log)',
    noOutputs: 'Sin outputs',
    closeSummary: 'Cerrar resumen',
    restartSimulation: 'Reiniciar simulaci√≥n',
    
    // About Dialog
    aboutTitle: 'üß† Event Loop de JavaScript',
    aboutSubtitle: 'Aprende c√≥mo JavaScript maneja m√∫ltiples tareas sin bloquearse',
    whatIsTitle: '¬øQu√© es el Event Loop?',
    whatIsPoint1: 'JavaScript es single-threaded',
    whatIsPoint1Desc: '- solo puede hacer una cosa a la vez',
    whatIsPoint2: 'El Event Loop',
    whatIsPoint2Desc: 'coordina m√∫ltiples tareas sin bloquear la ejecuci√≥n principal',
    whatIsPoint3: 'Gracias a √©l',
    whatIsPoint3Desc: ', el navegador puede seguir respondiendo mientras procesa operaciones as√≠ncronas',
    howWorksTitle: '¬øC√≥mo funciona?',
    howWorksPoint1: 'Call Stack',
    howWorksPoint1Desc: 'ejecuta el c√≥digo principal de forma s√≠ncrona',
    howWorksPoint2: 'Web APIs',
    howWorksPoint2Desc: 'gestionan tareas as√≠ncronas como fetch, setTimeout o event listeners',
    howWorksPoint3: 'Cuando terminan, sus resultados se env√≠an a las',
    howWorksPoint3Desc: 'colas',
    howWorksPoint3Desc2: '(Microtasks o Callbacks)',
    howWorksPoint4: 'El',
    howWorksPoint4Desc: 'Event Loop',
    howWorksPoint4Desc2: 'decide cu√°ndo procesarlas seg√∫n su prioridad',
    priorityTitle: 'Orden de prioridad (flujo visual)',
    priority1: '1Ô∏è‚É£ Call Stack',
    priority1Desc: 'C√≥digo s√≠ncrono',
    priority2: '2Ô∏è‚É£ Web APIs',
    priority2Desc: 'Manejan tareas externas',
    priority3: '3Ô∏è‚É£ Microtask Queue',
    priority3Desc: 'Promesas y procesos inmediatos',
    priority4: '4Ô∏è‚É£ Callback Queue',
    priority4Desc: 'Timeouts, eventos, etc.',
    tipLabel: 'üí°',
    tipStrong: 'Tip:',
    tipText: 'Las microtareas siempre se ejecutan antes que los callbacks, sin importar cu√°ndo se registraron',
    understood: '‚ú® Entendido - ¬°A simular!',
  },
  en: {
    // Navbar
    title: 'JavaScript Event Loop Simulator',
    subtitle: 'Interactive visualization of synchronous and asynchronous flow',
    auto: 'Auto',
    speed: 'Speed',
    speedSlow: 'Slow',
    speedNormal: 'Normal',
    speedFast: 'Fast',
    reset: 'Reset',
    theme: 'Theme',
    about: 'About Event Loop',
    selectSpeed: 'Select speed',
    resetSimulation: 'Reset simulation',
    
    // Event Cards
    syncCode: 'Synchronous Code',
    syncDesc: 'Immediate execution on Call Stack',
    setTimeoutDesc: 'Callback Queue with delay',
    promiseDesc: 'Microtask Queue with priority',
    fetchDesc: 'Web APIs + Promises combined',
    eventName: 'Event name',
    codeToExecute: 'Code to execute',
    delayMs: 'Delay (ms)',
    loadEvent: 'Load event',
    
    // Event Loop Panel
    eventLoop: 'Event Loop',
    callStack: 'Call Stack',
    callStackTip: 'Call stack where synchronous code is executed.',
    webApis: 'Web APIs',
    webApisTip: 'Browser APIs that handle asynchronous operations (timers, fetch, etc.).',
    microtaskQueue: 'Microtask Queue',
    microtaskQueueTip: 'High priority queue (fulfilled promises, mutation observers).',
    callbackQueue: 'Callback Queue',
    callbackQueueTip: 'Lower priority callbacks queue (timers, UI events).',
    
    // Execution Log
    executionLog: 'üìã Execution Log',
    noLogs: 'No logs yet',
    
    // Controls
    viewSummary: 'üìä View summary',
    restart: 'üîÅ Restart',
    execute: '‚èµ Execute',
    nextStep: '‚è≠ Next step',
    
    // Summary Dialog
    summaryTitle: 'Execution summary',
    loadedEvents: 'Loaded events',
    noEvents: 'No events',
    executionOrder: 'Execution order',
    noSteps: 'No steps executed',
    outputs: 'Outputs (console.log)',
    noOutputs: 'No outputs',
    closeSummary: 'Close summary',
    restartSimulation: 'Restart simulation',
    
    // About Dialog
    aboutTitle: 'üß† JavaScript Event Loop',
    aboutSubtitle: 'Learn how JavaScript handles multiple tasks without blocking',
    whatIsTitle: 'What is the Event Loop?',
    whatIsPoint1: 'JavaScript is single-threaded',
    whatIsPoint1Desc: '- it can only do one thing at a time',
    whatIsPoint2: 'The Event Loop',
    whatIsPoint2Desc: 'coordinates multiple tasks without blocking the main execution',
    whatIsPoint3: 'Thanks to it',
    whatIsPoint3Desc: ', the browser can keep responding while processing asynchronous operations',
    howWorksTitle: 'How does it work?',
    howWorksPoint1: 'Call Stack',
    howWorksPoint1Desc: 'executes the main code synchronously',
    howWorksPoint2: 'Web APIs',
    howWorksPoint2Desc: 'handle asynchronous tasks like fetch, setTimeout or event listeners',
    howWorksPoint3: 'When they finish, their results are sent to the',
    howWorksPoint3Desc: 'queues',
    howWorksPoint3Desc2: '(Microtasks or Callbacks)',
    howWorksPoint4: 'The',
    howWorksPoint4Desc: 'Event Loop',
    howWorksPoint4Desc2: 'decides when to process them according to their priority',
    priorityTitle: 'Priority order (visual flow)',
    priority1: '1Ô∏è‚É£ Call Stack',
    priority1Desc: 'Synchronous code',
    priority2: '2Ô∏è‚É£ Web APIs',
    priority2Desc: 'Handle external tasks',
    priority3: '3Ô∏è‚É£ Microtask Queue',
    priority3Desc: 'Promises and immediate processes',
    priority4: '4Ô∏è‚É£ Callback Queue',
    priority4Desc: 'Timeouts, events, etc.',
    tipLabel: 'üí°',
    tipStrong: 'Tip:',
    tipText: 'Microtasks are always executed before callbacks, regardless of when they were registered',
    understood: '‚ú® Got it - Let\'s simulate!',
  },
};

export function useTranslation(language: Language) {
  return translations[language];
}
